<?php

namespace App\Http\Controllers;

use App\Models\Distributor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use PhpOffice\PhpSpreadsheet\IOFactory;
use Carbon\Carbon;

class ReportController extends Controller
{
    private $keys;
    private $shuffleData;
    private $shuffled;
    private $names;

    private $cities = array('Харьков', 'Одесса', 'Хмельницкий');

    public function showTables(Request $r)
    {
        $cities = $this->cities;
        $data = array();

        if (isset($r->dateStart) and isset($r->dateEnd) and $r->dateEnd < $r->dateStart) {
            Session::flash('date-flip', 'Конечная дата не может быть больше начальной');
            return view('report.wrong');
        }

        foreach ($cities as $city) {
            $data['data'][$city] = $this->create_table($city, $r);
        }

        $data['names'] = $this->names;

        return view('report.index', $data);
    }

    /* Получаем данные из EXCEL */
    public static function get()
    {

        $xls = IOFactory::load(base_path('storage/app/public/dist/Distributors.xlsx'));
        $range = 'A1:' . $xls->getActiveSheet()->getHighestRowAndColumn()['column'] . $xls->getActiveSheet()->getHighestRowAndColumn()['row'];
        $xls = $xls->getActiveSheet()->rangeToArray($range);

        array_splice($xls, 0, 8); // "убрать Шапку"

        return $xls;
    }

    // Перевернуть, если даты в обратном порядке
    public function reverse($data)
    {
        $reverse = array();

        for ($i = 0; $i <= 7; $i++) {
            $reverse[] = $data[$i];
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            for ($j = 0; $j < 2; $j++) {
                $reverse[$i][] = $data[$i][$j];
            }
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            for ($j = count($data[$i]) - 2; $j > 1; $j--) {
                $reverse[$i][] = $data[$i][$j];
            }
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            $reverse[$i][] = $data[$i][count($data[$i]) - 1];
        }
        $reverse[] = $data[count($data) - 1];

        return $reverse;
    }

    // Очистка от ненужных строк до города
    public function trimData($data)
    {
        $cities = $this->cities;

        for ($i = 1; $i < count($data); $i++) {
            if (in_array($data[1][1], $cities)) break;
            array_splice($data, 1, 1);
        }
        array_pop($data); // Удалить Итого

        return $data;
    }

    public function trimCity($data, $city)
    {
        $arr[] = $data[0];
        $cities = $this->cities;

        for ($i = 1; $i < count($data); $i++) {
            if ($data[$i][1] == $city) {
                $j = $i + 1;
                while ($j < count($data) and !in_array($data[$j][1], $cities) and $data[$j][1] != 'Итог') {
                    $arr[] = $data[$j];
                    $j++;
                }
            }
        }
        array_splice($arr[0], 2, 0, 'Скол'); // место для "скользящее"

        return $arr;
    }

    /*   Массив ключей для сортировки    */
    public function getKeysForSort($data, $key)
    {
        $arr = array();

        for ($i = 1; $i < count($data); $i++) {
            if ($data[$i][$key] != "#NULL!" and $data[$i][$key] != null)
                $arr[] = $data[$i][$key];

        }
        ($key == 2) ? rsort($arr) : sort($arr);

        return $arr;
    }

    /*  Сортировка по Среднестатистическому (Скользящему)*/
    public function shuffle_slice($keys, $data, $new_data)
    {
        $this->keys = $keys;
        $this->shuffleData = $data;
        $this->shuffled = $new_data;

        if (count($this->keys) > 0) {
            for ($i = 1; $i < count($this->shuffleData); $i++) {
                if (isset($this->keys[0])) {
                    if ($this->shuffleData[$i][2] == $this->keys[0]) {
                        $j = $i;
                        $this->shuffled[] = $this->shuffleData[$j];
                        while (isset($this->shuffleData[$j + 1]) and $this->shuffleData[$j + 1][2] == "#NULL!") {
                            $this->shuffled[] = $this->shuffleData[$j + 1];
                            $j++;
                        }
                        array_shift($this->keys);
                    }
                }
            }
            self::shuffle_slice($this->keys, $this->shuffleData, $this->shuffled);
        }

        return $this->shuffled;
    }

    /*  Сортировка по номеру магазина*/
    public function shuffle_store($keys, $data, $new_data)
    {
        $this->keys = $keys;
        $this->shuffleData = $data;
        $this->shuffled = $new_data;

        if (count($this->keys) > 0) {
            for ($i = 1; $i < count($this->shuffleData); $i++) {
                if (isset($this->keys[0])) {
                    if ($this->shuffleData[$i][0] == $this->keys[0]) {
                        $this->shuffled[] = $this->shuffleData[$i];
                        $j = $i;
                        while (isset($this->shuffleData[$j + 1]) and $this->shuffleData[$j + 1][0] == null) {
                            $this->shuffled[] = $this->shuffleData[$j + 1];
                            $j++;
                        }
                        array_shift($this->keys);
                        $this->shuffleData[$i][0] = '---';
                    }
                }
            }
            self::shuffle_store($this->keys, $this->shuffleData, $this->shuffled);
        }

        return $this->shuffled;
    }

    /* Добавление Среднестатискического в общий массив*/
    public function middle($data)
    {
        $pattern = '/^[а-я]+/ui';

        for ($i = 1; $i < count($data); $i++) {
            $arr = array();
            $divider = count($data[$i]) - 3; // 1. номер магазина, 2. фио, 3. "Итого"

            if (preg_match($pattern, $data[$i][1]) && $data[$i][1] != 'Офис Харьков 120' and $data[$i][1] != "Офис") {
                foreach (array_slice($data[$i], 2, $divider) as $q) {
                    if ($q != "#NULL!") $arr[] = $q;
                }
                $scal = array_sum(str_replace(',', '', $arr)) / $divider;
                array_splice($data[$i], 2, 0, $scal);
            } else {
                array_splice($data[$i], 2, 0, "#NULL!");
            }

        }

        return $data;
    }

    /* Добавление Магазина в общий массив*/
    public function addStore($data)
    {
        $pattern = '/^[а-я]+/ui';

        for ($i = 1; $i < count($data); $i++) {
            if (preg_match($pattern, $data[$i][1]) and $data[$i][1] != "Офис Харьков 120" and $data[$i][1] != "Офис") {
                if (isset($data[$i + 1])) $data[$i][0] = mb_substr($data[$i + 1][1], 0, 2);
            }
        }

        return $data;
    }

    /* Форматирование выручки для нового отчета*/
    public function bigAndSmall($str)
    {
        $arr = explode(',', $str);

        if (count($arr) == 1) {
            if ($arr[0] == '') {
                return $arr[0];
            } else {
                if ($arr[0][0] == '-') return '<span class="big"><small class="small">' . $arr[0][0] . $arr[0][1] . '</small></span>';
                return '<span class="big"><small class="small">' . $arr[0][0] . '</small></span>';
            }
        }
        if (strlen($arr[0]) > 1) {
            if ($arr[1][0] < 5) {
                return '<span class="big">' . $arr[0] . '</span>';
            } else {
                $r = $arr[0] + 1;
                return '<span class="big">' . $r . '</span>';
            }
        }

        return '<span class="big">' . $arr[0] . '<small class="small">' . $arr[1][0] . '</small></span>';
    }

    // Обрезает имена в соответствии ТЗ. так-же создает оссоциативный массив типа "короткое имя" => "полное имя". Маcсив спользуется в js
    public function trimName($name)
    {
        $arr = explode(' ', $name);

        if (count($arr) == 1) return $arr[0];
        $shortName = mb_substr($arr[0], 0, 5) . mb_substr($arr[1], 0, 1);
        $this->names[$shortName] = $name;

        return $shortName;
    }

    public function trimDate($date)
    {
        return Carbon::parse($date)->format('d.m') . '&nbsp;';
    }

    public function weekTotal($name, Carbon $date)
    {
        $end = $date->endOfWeek()->format('Y-m-d');
        $start = $date->startOfWeek()->format('Y-m-d');

        return Distributor::where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function monthTotal($name, Carbon $date)
    {
        $end = $date->endOfMonth()->format('Y-m-d');
        $start = $date->startOfMonth()->format('Y-m-d');

        return Distributor::where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function seasonTotal($name, Carbon $date)
    {
        if (Carbon::parse($date)->format('n') > 2 and 9) {
            $start = Carbon::parse($date)->format('Y') . '-03-01';
            $end = Carbon::parse($date)->format('Y') . '-08-31';
        } elseif (Carbon::parse($date)->format('n') == 1 or Carbon::parse($date)->format('n') == 2) {

            $start = Carbon::parse($date)->subYear()->format('Y') . '-09-01';
            $end = Carbon::parse($date)->format('Y') . '-02-28';
        } else {
            $start = Carbon::parse($date)->format('Y') . '-09-01';
            $end = Carbon::parse($date)->addYear()->format('Y') . '-02-28';
        }

        return Distributor::where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function yearTotal($name, Carbon $date)
    {
        if (Carbon::parse($date)->format('n') == 1 or Carbon::parse($date)->format('n') == 2) {
            $start = Carbon::parse($date)->subYear()->format('Y') . '-03-01';
            $end = Carbon::parse($date)->format('Y') . '-02-28';
        } else {
            $start = Carbon::parse($date)->format('Y') . '-03-01';
            $end = Carbon::parse($date)->addYear()->format('Y') . '-02-28';
        }

        return Distributor::where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    /* НОВЫЙ ОТЧЕТ -------------------------------------*/
    public function create_table($city, Request $r)
    {
        $sort = $r->get('sort');
        $dateStart = $r->get('S');
        $dateEnd = $r->get('E');

//        $data = $this->get();                       // вывод из файла
//        $data = $this->trimCity($data, $city);      // вывод из файла
        $data = DistributorReportController::getData($city, $dateStart, $dateEnd);   // вывод из базы
        $data = $this->addStore($data);
        $data = $this->middle($data);

        if (isset($sort)) {
            $new_data[] = $data[0];
            switch ($sort) {
                case 'q':
                    $keys = $this->getKeysForSort($data, 2);
                    $data = $this->shuffle_slice($keys, $data, $new_data);
                    break;
                case 'm':
                    $keys = $this->getKeysForSort($data, 0);
                    $data = $this->shuffle_store($keys, $data, $new_data);
                    break;
            }
        }
        $t = '<table class="table-hover  my-table table_sort" >';
        $pattern = '/^[а-я]+/ui';
        $ruDaysArr = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];
        $ruMonths = ['', 'Январь', "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];
        $day = '';
        $weekcolor = '';
        $j = 1;
        for ($i = 0; $i < count($data); $i++) {
            $last_key = count($data[$i]) - 1;
            $firstDate = Carbon::parse($data[0][3]);
            $firstDateW = $firstDate;
            $name_row = preg_match($pattern, $data[$i][1]);
            $second_magaz = '';

            if ($i == 0) { // если шапка таблицы
                $t .= '<thead class="table-head"><tr>';
                if (isset($sort) and $sort == 'q') $t .= '<td></td>';
            } else {
                if ($i == 1) $t .= '<tbody>';      // если тело таблицы (срабатывает один раз)
                if ($name_row && $data[$i][1] != 'Офис Харьков 120' and $data[$i][1] != "Офис" and $data[$i][2] != null) { // если ряд с именем
                    $t .= '<tr class="name-tr">';
                    if (isset($sort) and $sort == 'q') $t .= '<td class="position">' . $j . '</td>';
                    if (isset($data[$i + 2]) and !preg_match($pattern, $data[$i + 2][1])) $second_magaz = $data[$i + 2];
                    $j++;
                } else {
                    continue;
                }
            }

            foreach ($data[$i] as $key => $cell) {
                if ($cell == "#NULL!") $cell = '';

                /* Проверка на шапку и тело */
                if ($i == 0) {
                    if ($key == 0) $cell = ($dateEnd and $dateStart) ? '<a href="' . route('report') . '?sort=m' . '&E=' . $dateEnd . '&S=' . $dateStart . '">M</a>' : '<a href="' . route('report') . '?sort=m' . '">M</a>';
                    else if ($key == 1) $cell = ($dateEnd and $dateStart) ? '<a href="' . route('report') . '?E=' . $dateEnd . '&S=' . $dateStart . '">ФИО реализатора</a>' : '<a href="' . route('report') . '">ФИО реализатора</a>';
                    else if ($key == 2) $cell = ($dateEnd and $dateStart) ? '<div class="date-wrap"><a href="' . route('report') . '?sort=q' . '&E=' . $dateEnd . '&S=' . $dateStart . '">Скольз.</a></div>' : '<div class="date-wrap"><a href="' . route('report') . '?sort=q' . '">Скольз.</a></div>';
                    else if ($key != $last_key) $day = $ruDaysArr[Carbon::parse($cell)->format('w')]; // дни недели. на русском
                } else {
                    if ($key == 2 and is_numeric($cell)) $cell = number_format($cell, 0, '', ','); //  Добавить запятую в  СРЕДНЕСТАТИСКИЧЕСКОМ (Скользящем)
                }

                if ($key > 2 and $key != $last_key) {     // Расскраска понедельно
                    $weekcolor = ((int)Carbon::parse($data[0][$key])->format('W') % 2) ? 'notgrey' : 'grey';  // класс для разделения ПОНЕДЕЛЬНО
                    if ($firstDateW->format('W') != Carbon::parse($data[0][$key])->format('W')) {
                        $firstDateW = Carbon::parse($data[0][$key]);
                        $totalW = $this->weekTotal($data[$i][1], Carbon::parse($data[0][$key]));
                        $totalW = number_format($totalW, 0, '', ',');
                        $t .= ($i == 0) ? '<td class="sort week-bg date ' . $weekcolor . '"> <div class="date-wrap week-head no-events">Неделя</div>   </td>' : '<td class="week-bg ' . $weekcolor . '">' .
                            $this->bigAndSmall($totalW) . '</td>';
                    }
//                    if ($firstDateM->format('m') != Carbon::parse($data[0][$key])->format('m')) {
//                        $firstDateM = Carbon::parse($data[0][$key]);
//                        $totalM = $this->monthTotal($data[$i][1], Carbon::parse($data[0][$key]));
//                        $totalM = number_format($totalM, 0, '', ',');
//                        $t .= ($i == 0) ? '<td class="date sort ' . $weekcolor . '"><div class="date-wrap no-events">' . $ruMonths[Carbon::parse($data[0][$key])->format('n')] .
//                            '</div></td>' : '<td class="' . $weekcolor . '">' . $this->bigAndSmall($totalM) . '</td>';
//                    }
                }

                /* --------------------------------------*/

                if (mb_strlen($cell) > 10) { // если ФИО
                    if ($i != 0) $t .= '<td class="name">' . $this->trimName($cell) . '</td>';
                    else if ($key != 2) $t .= '<td>' . $cell . '</td>';
                    else $t .= '<td class="slice date">' . $cell . '</td>';
                } else if ($key < 3) {
                    if ($key == 0) $t .= '<td class="main-store">' . $cell . '</td>';
                    else if ($key == 1) $t .= '<td class="magaz-name">' . $cell . '</td>';
                    else if ($key == 2) $t .= '<td class="slice">' . $this->bigAndSmall($cell) . '</td>';
                } else if ($key != $last_key) { // проверка на последний столб
                    if ($i == 0) {
                        $t .= '<td class="date ' . $weekcolor . '"><div class="date-wrap">' . $this->trimDate($cell) . $day . '</div></td>';
                    } else if (is_array($second_magaz) and $key < count($second_magaz) and $data[$i][$key] != null and $data[$i][$key] != "#NULL!" and $data[$i][$key] == $second_magaz[$key]) {
                        $t .= '<td class="' . $weekcolor . '"><small class="mini-magazin">' . substr($second_magaz[1], 0, 2) . '</small>' .
                            $this->bigAndSmall($cell) . '</td>';
                    } else {
                        $t .= '<td class="' . $weekcolor . '">' . $this->bigAndSmall($cell) . '</td>';
                    }
                }
            }

            /*------------------------------- СТАТИСТИКА МЕСЯЦ, СЕЗОН, ГОД. ШАПКА и ТЕЛО  --*/

            if ($i == 0) {
                $t .= '<td class="current-month-head date sort total-data-border"><div class="date-wrap no-events">' . $ruMonths[Carbon::parse($firstDate)->subMonth()->format('n')] . '</div></td>';
                $t .= '<td class="current-month-season date sort"><div class="date-wrap no-events">Сезон</div></td>';
                $t .= '<td class="current-month-year date sort"><div class="date-wrap no-events">Год</div></td>';

                $t .= "</tr></thead>";
            } else {
                $t .= '<td class="current-month-summ total-data-border">' . $this->bigAndSmall(number_format($this->monthTotal($data[$i][1], $firstDate->subMonth()), 0, '', ',')) . '</td>';
                $t .= '<td class="current-season-summ">' . $this->bigAndSmall(number_format($this->seasonTotal($data[$i][1], $firstDate), 0, '', ',')) . '</td>';
                $t .= '<td class="current-year-summ">' . $this->bigAndSmall(number_format($this->yearTotal($data[$i][1], $firstDate), 0, '', ',')) . '</td>';

                $t .= '</tr>';
            }
        }
        $t .= '</tbody></table>';

        return $t;
    }
}