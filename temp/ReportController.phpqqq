<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\RichText\RichText;
use Spatie\ArrayToXml\ArrayToXml;
use Carbon\Carbon;

class ReportController extends Controller
{
    private $sort;
    private $xml;
    private $new_arr = array();

    /* Получаем данные из EXCEL */
    public static function get()
    {
        $xls = IOFactory::load(base_path('storage/app/public/dist/Distributors.xlsx'));
        $range = 'A1:' . $xls->getActiveSheet()->getHighestRowAndColumn()['column'] . $xls->getActiveSheet()->getHighestRowAndColumn()['row'];

        /*  !!! НУЖЕН ДЛЯ ОТЧЕТА СВЕТЫ !!!
         * !!! OVERRIDED METOD IN PhpSpreadsheet IS NECESSARY  FOR SVETA'S REPORT!!!
         *
         *
         * method getPlainText() from PhpOffice\PhpSpreadsheet\RichText is OVERRIDED. $returnValue switched from STRING to ARRAY to split richText and  plainText from excel cell;
         * !!!!!! метод getPlainText() изменен что бы разделить данные из одной ячейки. $returnValue была строкой, изменена на массив.
         * */

        $xls = $xls->getActiveSheet()->rangeToArray($range);
//        if ($xls[17][1] === 'Готоф') array_splice($xls, 17, 1);
        array_splice($xls, 0, 8);
//        dd($xls);
        return $xls;
    }


    // Перевернуть, если даты в обратном порядке
    public function reverse($data)
    {
        $reverse = array();

        for ($i = 0; $i <= 7; $i++) {
            $reverse[] = $data[$i];
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            for ($j = 0; $j < 2; $j++) {
                $reverse[$i][] = $data[$i][$j];
            }
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            for ($j = count($data[$i]) - 2; $j > 1; $j--) {
                $reverse[$i][] = $data[$i][$j];
            }
        }
        for ($i = 8; $i < count($data) - 1; $i++) {
            $reverse[$i][] = $data[$i][count($data[$i]) - 1];
        }
        $reverse[] = $data[count($data) - 1];
        return $reverse;
    }

    public function trimData($data)
    {
        $cities = $this->cities;

        for ($i = 1; $i < count($data); $i++) {
            if (in_array($data[1][1], $cities)) break;
            array_splice($data, 1, 1);
        }
        array_pop($data); // Удалить Итого

        return $data;
    }

    public function trimCity($data, $city)
    {
        $arr[] = $data[0];
        $cities = $this->cities;
        for ($i = 1; $i < count($data); $i++) {
            if ($data[$i][1] == $city) {
                $j = $i + 1;
                while ($j < count($data) and !in_array($data[$j][1], $cities) and $data[$j][1] != 'Итог') {
                    $arr[] = $data[$j];
                    $j++;
                }
            }
        }
//        dd($arr);
        return $arr;
    }

    /*   Массив ключей для сортировки    */
    public function getKeysForSort($data, $key)
    {
        $arr = array();
        for ($i = 1; $i < count($data); $i++) {
            if ($data[$i][$key] != "#NULL!" and $data[$i][$key] != null)
                $arr[] = $data[$i][$key];

        }
        ($key == 2) ? rsort($arr) : sort($arr);
        return $arr;
    }

    /*  Сортировка по Среднестатистическому (Скользящему)*/
    public function shuffle_slice($keys, $data, $new_data)
    {
        $this->keys = $keys;
        $this->arr = $data;
        $this->new_arr = $new_data;
        if (count($this->keys) > 0) {
            for ($i = 1; $i < count($this->arr); $i++) {
                if (isset($this->keys[0])) {
                    if ($this->arr[$i][2] == $this->keys[0]) {
                        $j = $i;
                        $this->new_arr[] = $this->arr[$j];
                        while (isset($this->arr[$j + 1]) and $this->arr[$j + 1][2] == "#NULL!") {
                            $this->new_arr[] = $this->arr[$j + 1];
                            $j++;
                        }
                        array_shift($this->keys);
                    }
                }
            }
            self::shuffle_slice($this->keys, $this->arr, $this->new_arr);
        }
        return $this->new_arr;
    }

    /*  Сортировка по номеру магазина*/
    public function shuffle_store($keys, $data, $new_data)
    {
        $this->keys = $keys;
        $this->arr = $data;
        $this->new_arr = $new_data;
        if (count($this->keys) > 0) {
            for ($i = 1; $i < count($this->arr); $i++) {
                if (isset($this->keys[0])) {
                    if ($this->arr[$i][0] == $this->keys[0]) {
                        $this->new_arr[] = $this->arr[$i];
                        $j = $i;
                        while (isset($this->arr[$j + 1]) and $this->arr[$j + 1][0] == null) {
                            $this->new_arr[] = $this->arr[$j + 1];
                            $j++;
                        }
                        array_shift($this->keys);
                        $this->arr[$i][0] = '---';
                    }
                }
            }
            self::shuffle_store($this->keys, $this->arr, $this->new_arr);
        }
        return $this->new_arr;
    }

    /* Добавление Среднестатискического в общий массив*/
    public function middle($data)
    {
        $pattern = '/^[а-я]+/ui';
        for ($i = 1; $i < count($data); $i++) {
            $arr = array();
            $divider = count($data[$i]) - 3; // 1. номер магазина, 2. фио, 3. "Итого"

            if (preg_match($pattern, $data[$i][1]) && $data[$i][1] != 'Офис Харьков 120' and $data[$i][1] != "Офис") {
                foreach (array_slice($data[$i], 2, $divider) as $q) {
                    if ($q != "#NULL!") $arr[] = $q;
                }
                $scal = array_sum(str_replace(',', '', $arr)) / $divider;
                array_splice($data[$i], 2, 0, $scal);
            } else {
                array_splice($data[$i], 2, 0, "#NULL!");
            }

        }
        return $data;
    }

    /* Добавление Магазина в общий массив*/
    public function addStore($data)
    {
        $pattern = '/^[а-я]+/ui';
        for ($i = 1; $i < count($data); $i++) {
            if (preg_match($pattern, $data[$i][1]) and $data[$i][1] != "Офис Харьков 120" and $data[$i][1] != "Офис") {
                if (isset($data[$i + 1])) $data[$i][0] = mb_substr($data[$i + 1][1], 0, 2);
            }
        }
        return $data;
    }

    /* Форматирование выручки для нового отчета*/
    public function bigAndSmall($str)
    {
        $arr = explode(',', $str);
        if (count($arr) == 1) {
            if ($arr[0] == '') {
                return $arr[0];
            } else {
                if ($arr[0][0] == '-') return '<span class="big"><small class="small">' . $arr[0][0] . $arr[0][1] . '</small></span>';
                return '<span class="big"><small class="small">' . $arr[0][0] . '</small></span>';
            }
        }
        if (strlen($arr[0]) > 1) {
            if ($arr[1][0] < 5) {
                return '<span class="big">' . $arr[0] . '</span>';
            } else {
                $r = $arr[0] + 1;
                return '<span class="big">' . $r . '</span>';
            }
        }
        return '<span class="big">' . $arr[0] . '<small class="small">' . $arr[1][0] . '</small></span>';
    }

    public function trimName($name)
    {
        $arr = explode(' ', $name);
        return $arr[0] . ' ' . $arr[1];
    }

    public function trimDate($date)
    {
        return Carbon::parse($date)->format('d.m') . '&nbsp;';
    }

    public function weekTotal($name, Carbon $date)
    {
        $end = $date->endOfWeek()->format('Y-m-d');
        $start = $date->startOfWeek()->format('Y-m-d');
        return DB::table('distributors')->where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function monthTotal($name, Carbon $date)
    {
        $end = $date->endOfMonth()->format('Y-m-d');
        $start = $date->startOfMonth()->format('Y-m-d');
        return DB::table('distributors')->where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function seasonTotal($name, Carbon $date)
    {
        if (Carbon::parse($date)->format('n') > 2 and 9) {
            $start = Carbon::parse($date)->format('Y') . '-03-01';
            $end = Carbon::parse($date)->format('Y') . '-08-31';
        } elseif (Carbon::parse($date)->format('n') == 1 or Carbon::parse($date)->format('n') == 2) {

            $start = Carbon::parse($date)->subYear()->format('Y') . '-09-01';
            $end = Carbon::parse($date)->format('Y') . '-02-28';
        } else {
            $start = Carbon::parse($date)->format('Y') . '-09-01';
            $end = Carbon::parse($date)->addYear()->format('Y') . '-02-28';
        }
        return DB::table('distributors')->where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    public function yearTotal($name, Carbon $date)
    {
        if (Carbon::parse($date)->format('n') == 1 or Carbon::parse($date)->format('n') == 2) {
            $start = Carbon::parse($date)->subYear()->format('Y') . '-03-01';
            $end = Carbon::parse($date)->format('Y') . '-02-28';
        } else {
            $start = Carbon::parse($date)->format('Y') . '-03-01';
            $end = Carbon::parse($date)->addYear()->format('Y') . '-02-28';
        }
        return DB::table('distributors')->where('name', $name)->whereBetween('date', array($start, $end))->sum('summ');
    }

    /* НОВЫЙ ОТЧЕТ -------------------------------------*/
    public function create_new($city, Request $r)
    {
        $sort = $r->get('sort');

        $data = $this->get();
        $data = $this->trimCity($data, $city);
//        $data = DistributorReportController::getData($city);
        $data = $this->addStore($data);
        $data = $this->middle($data);
        if (isset($sort)) {
            $new_data[] = $data[0];
            switch ($sort) {
                case 'q':
                    $keys = $this->getKeysForSort($data, 2);
                    $data = $this->shuffle_slice($keys, $data, $new_data);
                    break;
                case 'm':
                    $keys = $this->getKeysForSort($data, 0);
                    $data = $this->shuffle_store($keys, $data, $new_data);
                    break;
            }
        }

        $t = '<table class="table-hover  my-table table_sort" >';
        $pattern = '/^[а-я]+/ui';
        $j = 1;
        array_splice($data[0], 2, 0, 'Скол'); // место для "скользящее"
        $ruDaysArr = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];
        $ruMonths = ['', 'Январь', "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];

        for ($i = 0; $i < count($data); $i++) {
            $last_key = count($data[$i]) - 1;
            $weekcolor = '';
            $firstDate = Carbon::parse($data[0][3]);
            $firstDateW = $firstDate;
            $firstDateM = $firstDate;
            $name_row = preg_match($pattern, $data[$i][1]);
            $second_magaz = '';
            if ($i > 0 && $i < 1) continue; // пропуск ненужных ячеек ячеек между шапкой и данными
            if ($i == 1) {
                $t .= '<tbody>';      // если тело таблицы (срабатывает один раз)
            }
            if ($i == 0) { // если шапка таблицы
                $t .= '<thead class="table-head"><tr>';
                if (isset($sort) and $sort == 'q') $t .= '<td></td>';
            } else {
                if ($name_row && $data[$i][1] != 'Офис Харьков 120' and $data[$i][1] != "Офис") { // если ряд с именем
                    $t .= '<tr class="name-tr">';
                    if (isset($sort) and $sort == 'q') $t .= '<td class="position">' . $j . '</td>';
                    $j++;
                    if (isset($data[$i + 2]) and !preg_match($pattern, $data[$i + 2][1])) $second_magaz = $data[$i + 2];
                } else {
                    continue;
                }
            }
            foreach ($data[$i] as $key => $cell) {

                /* Проверка на шапку и тело */
                if ($i == 0) {
                    if ($key == 0) $cell = '<a href="' . route('report') . '?sort=m' . '">M</a>';
                    if ($key == 1) $cell = '<a href="' . route('report') . '">ФИО реализатора</a>';
                    if ($key == 2) $cell = '<div class="date-wrap"><a href="' . route('report') . '?sort=q' . '">Скольз.</a></div>';
                    if ($key > 2 and $key != $last_key) {
                        $day = $ruDaysArr[Carbon::parse($cell)->format('w')]; // дни недели. на русском
                    }
                } else {
                    if ($key == 2 and $cell != "#NULL!") $cell = number_format($cell, 0, '', ','); //  Добавить запятую в  СРЕДНЕСТАТИСКИЧЕСКОМ (Скользящем)
                }

                if ($key > 2 and $key != $last_key) {     // Расскраска понедельно
                    $weekcolor = ((int)Carbon::parse($data[0][$key])->format('W') % 2) ? 'notgrey' : 'grey';  // класс для разделения ПОНЕДЕЛЬНО
                    if ($firstDateW->format('W') != Carbon::parse($data[0][$key])->format('W')) {
                        $firstDateW = Carbon::parse($data[0][$key]);
                        $totalW = $this->weekTotal($data[$i][1], Carbon::parse($data[0][$key]));
                        $totalW = number_format($totalW, 0, '', ',');
                        $t .= ($i == 0) ? '<td class="sort date ' . $weekcolor . '"> <div class="date-wrap no-events">Неделя</div>   </td>' : '<td class="' . $weekcolor . '">' .
                            $this->bigAndSmall($totalW) . '</td>';
                    }
                    if ($firstDateM->format('m') != Carbon::parse($data[0][$key])->format('m')) {
                        $firstDateM = Carbon::parse($data[0][$key]);
                        $totalM = $this->monthTotal($data[$i][1], Carbon::parse($data[0][$key]));
                        $totalM = number_format($totalM, 0, '', ',');
                        $t .= ($i == 0) ? '<td class="date sort ' . $weekcolor . '"><div class="date-wrap no-events">' . $ruMonths[Carbon::parse($data[0][$key])->format('n')] .
                            '</div></td>' : '<td class="' . $weekcolor . '">' . $this->bigAndSmall($totalM) . '</td>';
                    }
                }

                /* --------------------------------------*/

                if ($cell == "#NULL!") $cell = '';
                if ($key == '1' && !$name_row && $cell != 'Офис Харьков 120' and $cell != "Офис") $cell = mb_substr($cell, 0, 2);  // обрезание магазина до номера
                if (mb_strlen($cell) > 10) { // если больше 10 символов
                    if ($i != 0) {
                        $t .= '<td class="name">' . $this->trimName($cell) . '</td>';
                    } else {
                        if ($key != 2) {
                            $t .= '<td>' . $cell . '</td>';
                        } else {
                            $t .= '<td class="slice date">' . $cell . '</td>';
                        }
                    }
                } else {
                    if ($key > 1 and !$name_row or $data[$i][1] == 'Офис Харьков 120') {   //ряд  после СРЕДНЕСТАТИСКИЧЕСКОГО (Скользящее) и БЕЗ имени
                        if ($cell != '') {
                            if ($key != $last_key) {  //если не последний элемент ( нужно поменять)
                                $t .= ($cell != 'Офис Харьков 120') ? '<td class="' . $weekcolor . '">' . $this->bigAndSmall($cell) . '</td>' : '<td class="magaz-name">' . $cell . '</td>';
                            } else {
                                $t .= '<td class="itog-body-magaz">' . $this->bigAndSmall($cell) . '</td>'; // если полседний елемет (итого)
                            }
                        } else {
                            $t .= ($key < 3) ? '<td class="top">' . $cell . '</td>' : '<td class="' . $weekcolor . '">' . $cell . '</td>';  //
                        }
                    } else {
                        if ($key < 3) {
                            if ($key == 0) $t .= '<td class="main-store">' . $cell . '</td>';
                            if ($key == 1) $t .= '<td class="magaz-name">' . $cell . '</td>';
                            if ($key == 2) $t .= '<td class="slice">' . $this->bigAndSmall($cell) . '</td>';

                        } else {
                            if ($key != $last_key) { // проверка на последний столб
                                if ($i == 0) {
                                    $t .= '<td class="date ' . $weekcolor . '"><div class="date-wrap">' . $this->trimDate($cell) . $day . '</div></td>';
                                } else {
                                    if (is_array($second_magaz) and $data[$i][$key] != null and $data[$i][$key] != "#NULL!" and $data[$i][$key] == $second_magaz[$key]) {
                                        $t .= '<td class="' . $weekcolor . '"><small class="mini-magazin">' . substr($second_magaz[1], 0, 2) . '</small>' .
                                            $this->bigAndSmall($cell) . '</td>';
                                    } else {
                                        $t .= '<td class="' . $weekcolor . '">' . $this->bigAndSmall($cell) . '</td>';
                                    }
                                }
                            }
                        }
                    }
                }

                /*-------------------------------*/
            }
            if ($i == 0) {
                /* СТАТИСТИКА МЕСЯЦ, СЕЗОН, ГОД --ШАПКА*/
                $t .= '<td class="current-month-head date sort total-data-border"><div class="date-wrap no-events">' . $ruMonths[Carbon::parse($firstDate)->format('n')] . '</div></td>';
                $t .= '<td class="current-month-season date sort"><div class="date-wrap no-events">Сезон</div></td>';
                $t .= '<td class="current-month-year date sort"><div class="date-wrap no-events">' . Carbon::parse($firstDate)->format('Y') . '</div></td>';
                $t .= "</tr></thead>";
            } else {
                $t .= '<td class="current-month-summ total-data-border">' . $this->bigAndSmall(number_format($this->monthTotal($data[$i][1], $firstDate), 0, '', ',')) . '</td>';
                $t .= '<td class="current-season-summ">' . $this->bigAndSmall(number_format($this->seasonTotal($data[$i][1], $firstDate), 0, '', ',')) . '</td>';
                $t .= '<td class="current-year-summ">' . $this->bigAndSmall(number_format($this->yearTotal($data[$i][1], $firstDate), 0, '', ',')) . '</td>';
                $t .= '</tr>';
            }

        }
        $t .= '</tbody></table>';
        return $t;
    }


    /* ПЕРВЫЙ ОТЧЕТ     */
    public function create(Request $r)
    {
        $sort = $r->get('sort');
        $data = $this->get();
        $data = $this->addStore($data);
        $data = $this->middle($data);
        array_pop($data);
        if (isset($sort)) {
            $new_data = array();
            for ($i = 0; $i < 17; $i++) {
                $new_data[] = $data[$i];
            }
            switch ($sort) {
                case 'q':
                    $keys = $this->getKeysForSort($data, 2);
                    $data = $this->shuffle_slice($keys, $data, $new_data);
                    break;
                case 'm':
                    $keys = $this->getKeysForSort($data, 0);
                    $data = $this->shuffle_store($keys, $data, $new_data);
                    break;
            }
        }

        $t = '<table class="table-hover  my-table table_sort" >';
        $pattern = '/^[а-я]+/ui';
        $j = 1;
        array_splice($data[8], 2, 0, 'Скол'); // место для "скользящее"
        $ruDaysArr = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];
        $dayofweek = Carbon::parse($data[8][3])->format('N');
        $days = ['7' => 5, '6' => 6, '5' => 7, '4' => 1, '3' => 2, '2' => 3, '1' => 4];

        for ($i = 8; $i < count($data); $i++) {
            $last_key = count($data[$i]) - 1;
            $constData = (string)Carbon::parse($data[8][3]); // КОСТЫЛЬ ЕСЛИ ДЕНЬ ПРОПУЩЕН
            $name_row = preg_match($pattern, $data[$i][1]);
            $oneToSeven = $days[$dayofweek]; // начало неделе . нужно синхронизировать в календарем (с порядковым днем недели) для расскраски по дням
            $trigger = 1;   //для расскраски по неделям (белый/серый)

            if ($i > 8 && $i < 17) continue; // пропуск ячеек между шапкой и реализаторами
            if ($i == 18) {
                $t .= '<tbody>';      // если тело таблицы (срабатывает один раз)
            }
            if ($i == 8) { // если шапка таблицы
                $t .= "<thead class='table-head'><tr><td></td>";
            } else {
                if ($name_row && $data[$i][1] != 'Офис') { // если ряд с именем
//                    $q = 1;   // переключатель для удаления первого ряда    --------------------------------------------------------------
                    $t .= '<tr class="name-tr">';                                                                                  //       |
                    $t .= '<td class="position">' . $j . '</td>';
                    $j++;
//                    $data[$i][0] = mb_substr($data[$i + 1][1], 0, 2);    //номер основного магазина. (номер первого магазина)             |
                }                                                                                                                 //        |
//                else if (isset($q) and $q == 1) {                                                   <<-------------------------------------
//                    /*Пропуск первого ряда, после ряда с именем.
//                    * Проверяет на совпадение номера магазина в ряду с номером основного магазина
//                    * и пропускает его, если совпадает
//                    */
//                    $q = 0;
//                    continue;
//
//                }
                else {
                    // if ($data[$i - 1][0] == mb_substr($data[$i][1], 0, 2)) continue;    // Старый способ
                    $t .= '<tr>';  // начало ряда без имени
                    $t .= '<td class="position"></td>';
                }
            }

            foreach ($data[$i] as $key => $cell) {

                /* Проверка на шапку и тело */
                if ($i == 8) {
                    if ($key == 0) $cell = '<a href="' . route('report') . '?sort=m' . '">Mаг.</a>';
                    if ($key == 1) $cell = '<a href="' . route('report') . '">Подразделение</a>';
                    if ($key == 2) $cell = '<a href="' . route('report') . '?sort=q' . '">Скол</a>';
                    if ($key > 2 and $cell != 'Итог') $day = Carbon::parse($cell)->format('W');  // дни недели. на русском
                    $cell = str_replace('2021', '21', $cell);
                } else {
                    if ($key == 2 and $cell != "#NULL!") $cell = number_format($cell, 0, '', ','); //  обавить запятую в  СРЕДНЕСТАТИСКИЧЕСКОМ (Скользящем)
                }
                /* --------------------------------------*/
                if ($key > 2 and $key != $last_key) {     // КОСТЫЛЬ ЕСЛИ ДЕНЬ ПРОПУЩЕН
                    if ((string)Carbon::parse($data[8][$key]) != $constData) {
                        $diff = Carbon::parse($data[8][$key])->diffInDays($constData);
                        $oneToSeven = $oneToSeven + $diff;
                        if ($oneToSeven > 7) {
                            $oneToSeven = $oneToSeven - 7;
                            ($trigger == 1) ? $trigger = 0 : $trigger++;
                        }
                    }
                    $constData = Carbon::parse($data[8][$key])->previous('day'); // КОСТЫЛЬ ЕСЛИ ДЕНЬ ПРОПУЩЕН

                }

                $weekcolor = ($trigger == 0) ? 'grey' : 'notgrey';  // класс для разделения ПОНЕДЕЛЬНО

                if ($cell == "#NULL!") $cell = '';
                if ($key == '1' && !$name_row && $cell != 'Офис') $cell = mb_substr($cell, 0, 2);  // обрезание магазина до номера
                if ($cell == 'Скол') {
                    $t .= '<td>' . $cell . '</td>';  // класс для сортировки
                } else {
                    if (mb_strlen($cell) > 10) { // если больше 10 символов
                        $t .= ($i != 8) ? '<td class="name">' . $this->trimName($cell) . '</td>' : '<td>' . $cell . '</td>';  // ячейка с именем
                    } else {
                        if ($key > 1 and !$name_row or $data[$i][1] == 'Офис') {   //ряд  после СРЕДНЕСТАТИСКИЧЕСКОГО (Скользящее) и БЕЗ имени
                            if ($cell != '') {
                                if ($key != $last_key) {  //если не последний элемент ( нужно поменять)
                                    $t .= ($cell != 'Офис') ? '<td class="' . $weekcolor . '">' . $this->bigAndSmall($cell) . '</td>' : '<td>' . $cell . '</td>';
                                } else {
                                    $t .= '<td class="itog-body-magaz">' . $this->bigAndSmall($cell) . '</td>'; // если полседний елемет (итого)
                                }
                            } else {
                                $t .= ($key < 3) ? '<td>' . $cell . '</td>' : '<td class="' . $weekcolor . '">' . $cell . '</td>';  //
                            }
                        } else {
                            if ($key < 3) {
                                if ($key == 0) $t .= '<td class="main-store">' . $cell . '</td>';
                                if ($key == 1) $t .= '<td class="magaz-name">' . $cell . '</td>';
                                if ($key == 2) $t .= '<td class="slice">' . $this->bigAndSmall($cell) . '</td>';

                            } else {
                                if ($key != $last_key) { // проверка на последний столб
                                    $t .= ($i == 8) ? '<td class="date ' . $weekcolor . '"><div class="date-wrap">' . $this->trimDate($cell) . $day . '</div></td>' : '<td class="' . $weekcolor .
                                        '">' . $this->bigAndSmall($cell) . '</td>';
//                                    $t .= ($one == 1) ? '<td class="' . $weekcolor . '">' . $cell . $day . '</td>' : '<td class="' . $weekcolor . '"></td>';
                                } else {
                                    $t .= ($i == 8) ? '<td class="itog-head">' . $cell . '</td>' : '<td class="itog-body-name">' . $this->bigAndSmall($cell) . '</td>';
                                }
                            }
                        }
                    }
                }
                /* счетчик для раскраски ------------*/
                if ($oneToSeven == 7) {
                    $oneToSeven = 1;
                    if ($trigger == 1) {
                        $trigger = 0;
                    } else {
                        $trigger++;
                    }
                } else {
                    $oneToSeven++;
                }
            }
            if ($i == 8) {
                $t .= "</tr></thead>";
            } else {
                $t .= '</tr>';
            }
        }
        $t .= '</tbody></table>';
        $data['table'] = $t;
        return view('report.real_new', $data);
    }


}








// ДЛЯ ОТЧЕТА СВЕТЫ

//    public function create()
//    {
//        $xls = $this->get();
//        $sort = $this->sort($xls);
//        $data[] = $xls[0];
//        $shuffle = $this->shuffle($sort, $xls, $data);
//        $shuffle = $xls;
//        $q = '<table style="margin-right: 30px;" class="table-striped table-hover">';
//        $head = 1;
//
//        foreach ($shuffle as $row) {
//            $i = 1;
//            $j = 2;
//            if (isset($head)) {
//
//                $q .= "<thead class='table-head'><tr>";
//            } else {
//                $q .= '<tr>';
//            }
//            foreach ($row as $data) { if ($data == "#NULL!") $data = ':)';
//                if ($i == 3) {
//                    if (!is_array($data) && mb_strlen($data) > 3) {
//                        $q .= '<td class="col-end name">';
//                    } else {
//                        $q .= '<td class="col-end">';
//                    }
//                    if (is_array($data)) {
//                        $q .= $data[0] . '<small>' . $data[1] . '</small>';
//                    } else {
//                        $q .= $data;
//                    }
//                    $q .= '</td>';
//                    $i = 1;
//                    $j = $i;
//                } else {
//                    if ($j == 1) {
//                        $q .= '<td class="magaz">';
//                    } else {
//                        $q .= '<td>';
//                    }
//                    if (is_array($data)) {
//                        $q .= $data[0] . '<small>' . $data[1] . '</small>';
//                    } else {
//                        $q .= $data;
//                    }
//                    $q .= '</td>';
//                    $i++;
//                    $j = $i;
//                }
//            }
//            if (isset($head)) {
//                unset($head);
//                $q .= "</tr></thead>";
//            } else {
//                $q .= "</tr>";
//            }
//        }
//        $q .= '</table>';
//        $data['table'] = $q;
//        return view('report.index', $data);
//    }
